Kernel documentation:
	* https://docs.kernel.org
	* https://elixir.bootlin.com/linux/latest/source
	* https://kernelnewbies.org/

1) Check defconfig options:
	* Enable these options for debugging:
		a) CONFIG_EARLY_PRINTK
			- Enable use of early printk() to detect kernel failures before console is initialized.
		b) CONFIG_DEBUG_KERNEL
			- Enable kernel debugging.
		c) CONFIG_DETECT_HUNG_TASK
			- Enable identification of kernel-freeze culprits.
		d) CONFIG_DEBUG_INFO
			-  Allows decoding of kernel OOPS symbols.
		e) CONFIG_LOG_BUF_SHIFT=21
			- Sets the kernel buffer log size to the biggest possible value.

2) Check kernel command-line parameters:
	* Can be reviewed in /proc/cmdline for the current environment.
	* Statically added parameters at compile-time is reflected in CONFIG_CMDLINE.
	* Should be possible to modify at run-time via bootloader shell.

3) Check dmesg and syslog.

4) Enable dynamic debug: https://www.kernel.org/doc/html/latest/admin-guide/dynamic-debug-howto.html
	* Example of enabling dynamic debug to see pr_debug() logs for a module:
		- echo "module <module_name> +p" > /sys/kernel/debug/dynamic_debug/control

5) Check for kernel memory-access violations:
	a) kmemleak: https://www.kernel.org/doc/html/latest/dev-tools/kmemleak.html
	b) KASAN: https://www.kernel.org/doc/html/latest/dev-tools/kasan.html
	
6) Use sysrq: https://www.kernel.org/doc/html/latest/admin-guide/sysrq.html
	* Example of causing a kernel panic via sysrq:
		- echo 1 > /proc/sys/kernel/sysrq
		- echo c > /proc/sysrq-trigger
		
7) Enable lock-validation via lockdep: https://www.kernel.org/doc/Documentation/locking/lockdep-design.txt
	* Can be enabled in defconfig under "Hacking Options":
		 a) Detect Hard and Soft Lockups
		 b) Detect Hung Tasks
		 c) RT Mutex debugging, deadlock detection
		 d) Spinlock and rw-lock debugging: basic checks
		 e) Mutex debugging: basic checks
		 f) Lock debugging: detect incorrect freeing of live locks
		 g) Lock debugging: prove locking correctness
		 h) Lock usage statistics

8) Check basic system information:
	a) CPU: /proc/cpuinfo
	b) Memory: /proc/meminfo
	c) IRQs: /proc/interrupts
	
9) Check bootloader (BIOS/UEFI/U-Boot) options.

10) Use perf for performance profiling, it can analyze both user and kernel space code.
