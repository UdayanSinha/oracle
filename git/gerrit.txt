Gerrit Documentation: https://www.gerritcodereview.com

1) Set up Git and Gerrit (first-time only):
	a) git config --global user.email example@email.com
	b) git config --global user.name "John Doe"
	c) Generate and add SSH keys into Gerrit.

2) Download code using Git:
	* git clone -b <branch_to_checkout> <repo_clone_URL>
	
3) Rebase local copy of the repo:
	* git pull --rebase origin <branch_to_rebase_from>
		- branch_to_rebase_from needed when HEAD is detached.

4) Creating a Change:
	a) Make the changes.
	b) Stage files to be committed:
		* git status
		* git add <path_to_file1> <path_to_file2> …
	c) Setup Change ID hook:
		* scp -p -P 29418 $USER@example.gerrit.server.com:hooks/commit-msg <path_to_repo_dir>/.git/hooks/
		* chmod u+x <path_to_repo_dir>/.git/hooks/commit-msg
	d) Create a commit:
		* git commit -m "commit_message"
	e) Push changes to Gerrit:
		* git pull --rebase origin
		* git push origin HEAD:refs/for/<branch_to_push_to>
	f) Use the web interface or trigger to add reviewers.
	
5) Amending a Change:
	a) Stage files to be committed:
		* git status
		* git add <path_to_file1> <path_to_file2> …
	b) Create and push a patch-set:
		* git commit --amend
		* git push origin HEAD:refs/for/<branch_to_push_to>
		
6) Rebasing a Change:
	a) git pull --rebase origin
	b) If there are merge conflicts that need manual resolution, resolve them:
		i) Stage the files changed for conflict resolution:
			- git status
			- git add <path_to_file1> <path_to_file2> …
		ii) Continue the rebase:
			- git rebase --continue
	c) Push to Gerrit as a new patch-set:
		git push origin HEAD:refs/for/<branch_to_push_to>
		
7) Manually trying out a Change:
	a) Obtain the fetch-and-checkout command from the "Download" section of the web interface:
		* git fetch <change_fetch_URL> && git checkout FETCH_HEAD
	b) Build and experiment with the Change.
	
8) Amending a Change that is different from the one currently set up in the local copy of the repo:
	a) Obtain the fetch-and-checkout command from the "Download" section of the web interface:
		* git fetch <change_fetch_URL> && git checkout FETCH_HEAD
	b) Make the changes.
	c) Stage files to be committed:
		* git status
		* git add <path_to_file1> <path_to_file2> …
	d) Create and push a patch-set:
		* git commit --amend
		* git push origin HEAD:refs/for/<branch_to_push_to>
		
9) Creating a draft Change:
	a) Create a commit:
	b) Push changes to Gerrit:
		* git pull --rebase origin
		* git push origin HEAD:refs/drafts/<branch_to_push_to>
	c) Use the web interface to add reviewers, if needed.
	
10) Cherry-picking another Change:
	a) Obtain the fetch-and-cherry-pick command from the "Download" section of the web interface:
		* git fetch <change_fetch_URL> && git cherry-pick FETCH_HEAD
		* git pull --rebase origin <branch_to_rebase_from>
	b) Make the changes.
	c) Stage files to be committed:
		* git status
		* git add <path_to_file1> <path_to_file2> …
	d) Setup Change ID hook:
		* scp -p -P 29418 $USER@example.gerrit.server.com:hooks/commit-msg <path_to_repo_dir>/.git/hooks/
		* chmod u+x <path_to_repo_dir>/.git/hooks/commit-msg
	e) Create a commit:
		* git commit -m "commit_message"
	f) Push changes to Gerrit:
		* git pull --rebase origin
		* git push origin HEAD:refs/draft/<branch_to_push_to>
	
Misc. useful Git command combinations:
	1) See which author and commit changed each line, in a given file.
		* git blame <path_to_file>
	2) List git branch information:
		* git branch -a
	3) Find information about commits:
		a) If a branch contains a given commit, specified by its hash:
			* git branch -a --contains <commit_hash>
		b) Show commit message for a given commit, specified by its hash:
			* git show -s --format=%B <commit_hash>
	4) Create patch files from a given commit, specified by its hash:
		* git format-patch -1 <commit_hash>
	5) Using patch files:
		a) Verify the patch file:
			* git apply --stat <path_to_patch_file>
			* git apply --check <path_to_patch_file>
		b) Applying patch file(s):
			* git apply <path_to_patch_file>/*.patch
		c) Applying multiple patch files:
			* git am <path_to_patch_file_dir>/*.patch
